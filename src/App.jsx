
import React, { useState, useEffect } from 'react'
import './App.css'

export default function App() {
  const [tasks, setTasks] = useState([])
  const [newTask, setNewTask] = useState('')
  const [assignee, setAssignee] = useState('')
  const [priority, setPriority] = useState('medium')
  const [filter, setFilter] = useState('all')
  const [assignees, setAssignees] = useState(['–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞'])
  const [newAssignee, setNewAssignee] = useState('')
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [currentUser, setCurrentUser] = useState({ firstName: '', lastName: '' })
  const [loginForm, setLoginForm] = useState({ firstName: '', lastName: '' })
  const [showTaskModal, setShowTaskModal] = useState(false)
  const [newTaskForm, setNewTaskForm] = useState({
    task: '',
    department: '',
    lastName: '',
    roomNumber: ''
  })
  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' })

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedTasks = localStorage.getItem('todoTasks')
    const savedAssignees = localStorage.getItem('todoAssignees')
    const savedUser = localStorage.getItem('todoUser')
    const savedAuth = localStorage.getItem('todoAuth')
    
    if (savedTasks) {
      setTasks(JSON.parse(savedTasks))
    }
    if (savedAssignees) {
      setAssignees(JSON.parse(savedAssignees))
    }
    if (savedUser) {
      setCurrentUser(JSON.parse(savedUser))
    }
    if (savedAuth === 'true') {
      setIsAuthenticated(true)
    }
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  useEffect(() => {
    localStorage.setItem('todoTasks', JSON.stringify(tasks))
  }, [tasks])

  useEffect(() => {
    localStorage.setItem('todoAssignees', JSON.stringify(assignees))
  }, [assignees])

  useEffect(() => {
    localStorage.setItem('todoUser', JSON.stringify(currentUser))
    localStorage.setItem('todoAuth', isAuthenticated.toString())
  }, [currentUser, isAuthenticated])

  const playNotificationSound = () => {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)()
    const oscillator = audioContext.createOscillator()
    const gainNode = audioContext.createGain()
    
    oscillator.connect(gainNode)
    gainNode.connect(audioContext.destination)
    
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime)
    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1)
    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime)
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5)
    
    oscillator.start(audioContext.currentTime)
    oscillator.stop(audioContext.currentTime + 0.5)
  }

  const showNotification = (message, type = 'success') => {
    setNotification({ show: true, message, type })
    setTimeout(() => {
      setNotification({ show: false, message: '', type: 'success' })
    }, 3000)
  }

  const addTask = () => {
    if (newTask.trim()) {
      const task = {
        id: Date.now(),
        text: newTask,
        assignee: assignee || '–û–±—â–∏–µ –¥–µ–ª–∞',
        priority: priority,
        author: `${currentUser.firstName} ${currentUser.lastName}`,
        completed: false,
        createdAt: new Date().toLocaleString()
      }
      setTasks([...tasks, task])
      setNewTask('')
      setAssignee('')
      setPriority('medium')
      
      playNotificationSound()
      showNotification('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    }
  }

  const addTaskFromModal = () => {
    if (newTaskForm.task.trim() && newTaskForm.department.trim() && 
        newTaskForm.lastName.trim() && newTaskForm.roomNumber.trim()) {
      const task = {
        id: Date.now(),
        text: newTaskForm.task,
        assignee: assignee || '–û–±—â–∏–µ –¥–µ–ª–∞',
        priority: priority,
        author: `${currentUser.firstName} ${currentUser.lastName}`,
        department: newTaskForm.department,
        lastName: newTaskForm.lastName,
        roomNumber: newTaskForm.roomNumber,
        completed: false,
        createdAt: new Date().toLocaleString()
      }
      setTasks([...tasks, task])
      setNewTaskForm({ task: '', department: '', lastName: '', roomNumber: '' })
      setAssignee('')
      setPriority('medium')
      setShowTaskModal(false)
      
      playNotificationSound()
      showNotification('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    } else {
      showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error')
    }
  }

  const toggleTask = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ))
  }

  const deleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id))
  }

  const addAssignee = () => {
    if (newAssignee.trim() && !assignees.includes(newAssignee)) {
      setAssignees([...assignees, newAssignee])
      setNewAssignee('')
    }
  }

  const removeAssignee = (assigneeToRemove) => {
    setAssignees(assignees.filter(a => a !== assigneeToRemove))
    // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ "–û–±—â–∏–µ –¥–µ–ª–∞"
    setTasks(tasks.map(task => 
      task.assignee === assigneeToRemove 
        ? { ...task, assignee: '–û–±—â–∏–µ –¥–µ–ª–∞' }
        : task
    ))
  }

  const handleLogin = () => {
    if (loginForm.firstName.trim() && loginForm.lastName.trim()) {
      setCurrentUser({
        firstName: loginForm.firstName,
        lastName: loginForm.lastName
      })
      setIsAuthenticated(true)
      setLoginForm({ firstName: '', lastName: '' })
    }
  }

  const handleLogout = () => {
    setIsAuthenticated(false)
    setCurrentUser({ firstName: '', lastName: '' })
    localStorage.removeItem('todoUser')
    localStorage.removeItem('todoAuth')
  }

  const filteredTasks = tasks.filter(task => {
    if (filter === 'all') return true
    if (filter === 'general') return task.assignee === '–û–±—â–∏–µ –¥–µ–ª–∞'
    if (filter === 'completed') return task.completed
    if (filter === 'pending') return !task.completed
    if (filter === 'high') return task.priority === 'high'
    if (filter === 'medium') return task.priority === 'medium'
    if (filter === 'low') return task.priority === 'low'
    return task.assignee === filter
  })

  const getTaskStats = () => {
    const total = tasks.length
    const completed = tasks.filter(t => t.completed).length
    const pending = total - completed
    return { total, completed, pending }
  }

  const stats = getTaskStats()

  if (!isAuthenticated) {
    return (
      <div className="app">
        <div className="login-container">
          <div className="login-form">
            <h1>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h1>
            <p>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ TODO –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫</p>
            <div className="form-group">
              <input
                type="text"
                value={loginForm.firstName}
                onChange={(e) => setLoginForm({...loginForm, firstName: e.target.value})}
                placeholder="–ò–º—è"
                onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
              />
            </div>
            <div className="form-group">
              <input
                type="text"
                value={loginForm.lastName}
                onChange={(e) => setLoginForm({...loginForm, lastName: e.target.value})}
                placeholder="–§–∞–º–∏–ª–∏—è"
                onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
              />
            </div>
            <button onClick={handleLogin} className="login-button">
              –í–æ–π—Ç–∏
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="app">
      <header className="header">
        <div className="header-content">
          <div className="header-left">
            <h1>üìù TODO –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫</h1>
            <div className="stats">
              <span>–í—Å–µ–≥–æ: {stats.total}</span>
              <span>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.completed}</span>
              <span>–í —Ä–∞–±–æ—Ç–µ: {stats.pending}</span>
            </div>
          </div>
          <div className="header-right">
            <span className="user-info">
              –ü—Ä–∏–≤–µ—Ç, {currentUser.firstName} {currentUser.lastName}!
            </span>
            <button onClick={handleLogout} className="logout-button">
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </header>

      <div className="main-content">
        <div className="sidebar">
          <div className="assignee-management">
            <h3>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</h3>
            <div className="add-assignee">
              <input
                type="text"
                value={newAssignee}
                onChange={(e) => setNewAssignee(e.target.value)}
                placeholder="–ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                onKeyPress={(e) => e.key === 'Enter' && addAssignee()}
              />
              <button onClick={addAssignee}>+</button>
            </div>
            <ul className="assignee-list">
              {assignees.map(assignee => (
                <li key={assignee} className="assignee-item">
                  <span>{assignee}</span>
                  <button 
                    onClick={() => removeAssignee(assignee)}
                    className="remove-btn"
                    title="–£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
                  >
                    √ó
                  </button>
                </li>
              ))}
            </ul>
          </div>

          <div className="filters">
            <h3>–§–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á</h3>
            <select 
              value={filter} 
              onChange={(e) => setFilter(e.target.value)}
              className="filter-select"
            >
              <option value="all">–í—Å–µ –∑–∞–¥–∞—á–∏</option>
              <option value="general">–û–±—â–∏–µ –¥–µ–ª–∞</option>
              <option value="completed">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</option>
              <option value="pending">–í —Ä–∞–±–æ—Ç–µ</option>
              <option value="high">üî¥ –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å</option>
              <option value="medium">üü° –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å</option>
              <option value="low">üü¢ –ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å</option>
              {assignees.map(assignee => (
                <option key={assignee} value={assignee}>
                  {assignee}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="content">
          <div className="add-task-header">
            <button 
              onClick={() => setShowTaskModal(true)} 
              className="add-task-button"
            >
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            </button>
          </div>

          <div className="task-list">
            {filteredTasks.length === 0 ? (
              <div className="no-tasks">
                {filter === 'all' ? '–ù–µ—Ç –∑–∞–¥–∞—á' : `–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ "${filter}"`}
              </div>
            ) : (
              filteredTasks.map(task => (
                <div 
                  key={task.id} 
                  className={`task-item ${task.completed ? 'completed' : ''}`}
                >
                  <div className="task-content">
                    <input
                      type="checkbox"
                      checked={task.completed}
                      onChange={() => toggleTask(task.id)}
                    />
                    <div className="task-info">
                      <span className="task-text">{task.text}</span>
                      <div className="task-meta">
                        <span className="assignee">{task.assignee}</span>
                        <span className={`priority priority-${task.priority}`}>
                          {task.priority === 'high' && 'üî¥ –í—ã—Å–æ–∫–∞—è'}
                          {task.priority === 'medium' && 'üü° –°—Ä–µ–¥–Ω—è—è'}
                          {task.priority === 'low' && 'üü¢ –ù–∏–∑–∫–∞—è'}
                        </span>
                        {task.department && <span className="department">üè¢ {task.department}</span>}
                        {task.lastName && <span className="contact">üë§ {task.lastName}</span>}
                        {task.roomNumber && <span className="room">üö™ –ö–∞–±. {task.roomNumber}</span>}
                        <span className="author">–ê–≤—Ç–æ—Ä: {task.author}</span>
                        <span className="created-at">{task.createdAt}</span>
                      </div>
                    </div>
                  </div>
                  <button 
                    onClick={() => deleteTask(task.id)}
                    className="delete-btn"
                    title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              ))
            )}
          </div>
        </div>

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        {notification.show && (
          <div className={`notification ${notification.type}`}>
            {notification.message}
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
        {showTaskModal && (
          <div className="modal-overlay" onClick={() => setShowTaskModal(false)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h2>üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</h2>
                <button 
                  className="close-button"
                  onClick={() => setShowTaskModal(false)}
                >
                  √ó
                </button>
              </div>
              
              <div className="modal-body">
                <div className="form-group">
                  <label>–ó–∞–¥–∞—á–∞ *</label>
                  <textarea
                    value={newTaskForm.task}
                    onChange={(e) => setNewTaskForm({...newTaskForm, task: e.target.value})}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                    rows="3"
                  />
                </div>

                <div className="form-row">
                  <div className="form-group">
                    <label>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ *</label>
                    <input
                      type="text"
                      value={newTaskForm.department}
                      onChange={(e) => setNewTaskForm({...newTaskForm, department: e.target.value})}
                      placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"
                    />
                  </div>

                  <div className="form-group">
                    <label>–§–∞–º–∏–ª–∏—è *</label>
                    <input
                      type="text"
                      value={newTaskForm.lastName}
                      onChange={(e) => setNewTaskForm({...newTaskForm, lastName: e.target.value})}
                      placeholder="–§–∞–º–∏–ª–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
                    />
                  </div>
                </div>

                <div className="form-row">
                  <div className="form-group">
                    <label>–ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ *</label>
                    <input
                      type="text"
                      value={newTaskForm.roomNumber}
                      onChange={(e) => setNewTaskForm({...newTaskForm, roomNumber: e.target.value})}
                      placeholder="–ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞"
                    />
                  </div>

                  <div className="form-group">
                    <label>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</label>
                    <select 
                      value={assignee} 
                      onChange={(e) => setAssignee(e.target.value)}
                    >
                      <option value="">–û–±—â–∏–µ –¥–µ–ª–∞</option>
                      {assignees.map(assignee => (
                        <option key={assignee} value={assignee}>{assignee}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div className="form-group">
                  <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                  <select 
                    value={priority} 
                    onChange={(e) => setPriority(e.target.value)}
                    className="priority-select"
                  >
                    <option value="high">üî¥ –í—ã—Å–æ–∫–∞—è</option>
                    <option value="medium">üü° –°—Ä–µ–¥–Ω—è—è</option>
                    <option value="low">üü¢ –ù–∏–∑–∫–∞—è</option>
                  </select>
                </div>
              </div>

              <div className="modal-footer">
                <button 
                  onClick={() => setShowTaskModal(false)}
                  className="cancel-button"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button 
                  onClick={addTaskFromModal}
                  className="submit-button"
                >
                  –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
